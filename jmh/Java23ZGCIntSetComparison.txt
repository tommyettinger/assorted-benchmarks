~\.jdks\temurin-23\bin\java.exe -XX:+UseZGC -jar benchmarks.jar "(JDKGetPut|JDKGDXDSIntSet|GDXIntSet).bench" -p impl=DEFAULT -p size=200000 -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                      (impl)  (seed)  (size)       (workload)    Mode    Cnt         Score       Error  Units
GDXIntSet.bench               DEFAULT      -1  200000              ADD  sample  39189    638467.123 ±  1897.391  ns/op
GDXIntSet.bench               DEFAULT      -1  200000           REMOVE  sample  38790    645036.594 ±  5084.823  ns/op
GDXIntSet.bench               DEFAULT      -1  200000         CONTAINS  sample  33437    748085.241 ±  4437.117  ns/op
GDXIntSet.bench               DEFAULT      -1  200000    ADD_OR_REMOVE  sample  13320   1878462.808 ± 16619.418  ns/op
GDXIntSet.bench               DEFAULT      -1  200000  ADD_THEN_REMOVE  sample   9160   2732256.699 ± 26956.959  ns/op
GDXIntSet.bench               DEFAULT      -1  200000  REMOVE_THEN_ADD  sample   9279   2696088.816 ± 26055.834  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000              ADD  sample  42006    595924.974 ±  1641.194  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000           REMOVE  sample  50036    499787.844 ±  1022.666  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000         CONTAINS  sample  43100    580057.392 ±  1314.089  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000    ADD_OR_REMOVE  sample  17701   1413886.395 ±  4735.263  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12194   2051475.083 ±  6481.755  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000  REMOVE_THEN_ADD  sample  11789   2122649.418 ±  6594.200  ns/op
JDKGetPut.bench               DEFAULT      -1  200000              ADD  sample  11185   2236793.008 ± 10031.509  ns/op
JDKGetPut.bench               DEFAULT      -1  200000           REMOVE  sample  43539    575019.064 ±  1508.646  ns/op
JDKGetPut.bench               DEFAULT      -1  200000         CONTAINS  sample  19368   1291693.099 ±  4721.507  ns/op
JDKGetPut.bench               DEFAULT      -1  200000    ADD_OR_REMOVE  sample   9735   2568441.925 ± 13935.432  ns/op
JDKGetPut.bench               DEFAULT      -1  200000  ADD_THEN_REMOVE  sample   5492   4553052.294 ± 27482.410  ns/op
JDKGetPut.bench               DEFAULT      -1  200000  REMOVE_THEN_ADD  sample   6193   4040279.717 ± 18017.778  ns/op

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGetPut|JDKGDXDSIntSet|GDXIntSet|FastutilIntSet)\.bench" -p impl=DEFAULT -p size=8000,40000,200000 -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                      (impl)  (seed)  (size)       (workload)    Mode     Cnt         Score       Error  Units
FastutilIntSet.bench          DEFAULT      -1    8000              ADD  sample  450773     16989.612 ±   118.472  ns/op
FastutilIntSet.bench          DEFAULT      -1    8000           REMOVE  sample  431090     14719.080 ±    72.586  ns/op
FastutilIntSet.bench          DEFAULT      -1    8000         CONTAINS  sample  743725     16878.595 ±    39.462  ns/op
FastutilIntSet.bench          DEFAULT      -1    8000    ADD_OR_REMOVE  sample  619878     20310.287 ±    50.472  ns/op
FastutilIntSet.bench          DEFAULT      -1    8000  ADD_THEN_REMOVE  sample  176697    141408.360 ±   304.798  ns/op
FastutilIntSet.bench          DEFAULT      -1    8000  REMOVE_THEN_ADD  sample  178365    140181.267 ±   223.897  ns/op
FastutilIntSet.bench          DEFAULT      -1   40000              ADD  sample  241788    103393.894 ±   190.392  ns/op
FastutilIntSet.bench          DEFAULT      -1   40000           REMOVE  sample  399780     62560.539 ±   121.224  ns/op
FastutilIntSet.bench          DEFAULT      -1   40000         CONTAINS  sample  228178    109603.543 ±   202.005  ns/op
FastutilIntSet.bench          DEFAULT      -1   40000    ADD_OR_REMOVE  sample   69144    361776.117 ±   732.986  ns/op
FastutilIntSet.bench          DEFAULT      -1   40000  ADD_THEN_REMOVE  sample   27015    925732.654 ±  2209.846  ns/op
FastutilIntSet.bench          DEFAULT      -1   40000  REMOVE_THEN_ADD  sample   26753    935216.984 ±  2363.018  ns/op
FastutilIntSet.bench          DEFAULT      -1  200000              ADD  sample   40844    612689.481 ±  1545.819  ns/op
FastutilIntSet.bench          DEFAULT      -1  200000           REMOVE  sample   78170    319917.767 ±   609.236  ns/op
FastutilIntSet.bench          DEFAULT      -1  200000         CONTAINS  sample   40762    613544.289 ±  1402.672  ns/op
FastutilIntSet.bench          DEFAULT      -1  200000    ADD_OR_REMOVE  sample   16581   1508505.467 ±  4251.803  ns/op
FastutilIntSet.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample    5484   4561188.038 ± 24045.614  ns/op
FastutilIntSet.bench          DEFAULT      -1  200000  REMOVE_THEN_ADD  sample    5631   4444213.828 ± 19746.194  ns/op
GDXIntSet.bench               DEFAULT      -1    8000              ADD  sample  596978     21086.880 ±    55.159  ns/op
GDXIntSet.bench               DEFAULT      -1    8000           REMOVE  sample  461452     13830.677 ±    58.825  ns/op
GDXIntSet.bench               DEFAULT      -1    8000         CONTAINS  sample  396288     16286.365 ±    88.649  ns/op
GDXIntSet.bench               DEFAULT      -1    8000    ADD_OR_REMOVE  sample  361126     34991.669 ±   108.765  ns/op
GDXIntSet.bench               DEFAULT      -1    8000  ADD_THEN_REMOVE  sample  479195     52243.198 ±    94.287  ns/op
GDXIntSet.bench               DEFAULT      -1    8000  REMOVE_THEN_ADD  sample  491930     50837.214 ±    95.237  ns/op
GDXIntSet.bench               DEFAULT      -1   40000              ADD  sample  236558    105775.952 ±   217.680  ns/op
GDXIntSet.bench               DEFAULT      -1   40000           REMOVE  sample  267812     93354.554 ±   159.615  ns/op
GDXIntSet.bench               DEFAULT      -1   40000         CONTAINS  sample  212055    117943.253 ±   214.562  ns/op
GDXIntSet.bench               DEFAULT      -1   40000    ADD_OR_REMOVE  sample   70213    356234.721 ±   745.657  ns/op
GDXIntSet.bench               DEFAULT      -1   40000  ADD_THEN_REMOVE  sample   78335    319302.200 ±   783.764  ns/op
GDXIntSet.bench               DEFAULT      -1   40000  REMOVE_THEN_ADD  sample   78106    320412.695 ±   716.915  ns/op
GDXIntSet.bench               DEFAULT      -1  200000              ADD  sample   40602    616261.016 ±  1799.493  ns/op
GDXIntSet.bench               DEFAULT      -1  200000           REMOVE  sample   48770    512826.433 ±  1449.245  ns/op
GDXIntSet.bench               DEFAULT      -1  200000         CONTAINS  sample   40249    621536.249 ±  1830.161  ns/op
GDXIntSet.bench               DEFAULT      -1  200000    ADD_OR_REMOVE  sample   16681   1499711.198 ±  5638.201  ns/op
GDXIntSet.bench               DEFAULT      -1  200000  ADD_THEN_REMOVE  sample   12562   1992107.794 ±  6733.397  ns/op
GDXIntSet.bench               DEFAULT      -1  200000  REMOVE_THEN_ADD  sample   12411   2015679.520 ±  7554.233  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1    8000              ADD  sample  410027     15660.515 ±    75.141  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1    8000           REMOVE  sample  378588     16944.696 ±    85.825  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1    8000         CONTAINS  sample  395209     16278.170 ±    84.208  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1    8000    ADD_OR_REMOVE  sample  425143     29685.691 ±    84.437  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1    8000  ADD_THEN_REMOVE  sample  254071     49807.894 ±   171.563  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1    8000  REMOVE_THEN_ADD  sample  431619     57929.735 ±    99.064  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1   40000              ADD  sample  246980    101270.567 ±   165.699  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1   40000           REMOVE  sample  262006     95380.147 ±   118.849  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1   40000         CONTAINS  sample  241443    103539.177 ±   155.760  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1   40000    ADD_OR_REMOVE  sample   68809    363470.741 ±   626.210  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1   40000  ADD_THEN_REMOVE  sample   79411    314976.512 ±   672.219  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1   40000  REMOVE_THEN_ADD  sample   82548    303054.269 ±   686.559  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000              ADD  sample   40725    614628.360 ±  1576.818  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000           REMOVE  sample   49485    505546.338 ±  1052.634  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000         CONTAINS  sample   42694    586204.539 ±  1268.772  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000    ADD_OR_REMOVE  sample   17396   1437898.493 ±  3928.185  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample   12144   2061057.181 ±  5471.115  ns/op
JDKGDXDSIntSet.bench          DEFAULT      -1  200000  REMOVE_THEN_ADD  sample   12528   1996980.802 ±  9799.643  ns/op
JDKGetPut.bench               DEFAULT      -1    8000              ADD  sample  384341     65036.019 ±   119.475  ns/op
JDKGetPut.bench               DEFAULT      -1    8000           REMOVE  sample  640425     19580.364 ±    44.297  ns/op
JDKGetPut.bench               DEFAULT      -1    8000         CONTAINS  sample  435916     28993.046 ±    90.797  ns/op
JDKGetPut.bench               DEFAULT      -1    8000    ADD_OR_REMOVE  sample  263265     48033.968 ±   159.449  ns/op
JDKGetPut.bench               DEFAULT      -1    8000  ADD_THEN_REMOVE  sample  262299     95341.752 ±   207.860  ns/op
JDKGetPut.bench               DEFAULT      -1    8000  REMOVE_THEN_ADD  sample  310631     80522.620 ±   172.345  ns/op
JDKGetPut.bench               DEFAULT      -1   40000              ADD  sample   64622    386795.107 ±   968.755  ns/op
JDKGetPut.bench               DEFAULT      -1   40000           REMOVE  sample  220570    113362.625 ±   271.180  ns/op
JDKGetPut.bench               DEFAULT      -1   40000         CONTAINS  sample  116084    215498.116 ±   534.629  ns/op
JDKGetPut.bench               DEFAULT      -1   40000    ADD_OR_REMOVE  sample   51429    486725.385 ±  1610.770  ns/op
JDKGetPut.bench               DEFAULT      -1   40000  ADD_THEN_REMOVE  sample   38291    653403.727 ±  2197.907  ns/op
JDKGetPut.bench               DEFAULT      -1   40000  REMOVE_THEN_ADD  sample   38761    645587.472 ±  2086.840  ns/op
JDKGetPut.bench               DEFAULT      -1  200000              ADD  sample   13215   1893638.916 ±  7124.206  ns/op
JDKGetPut.bench               DEFAULT      -1  200000           REMOVE  sample   42180    593053.169 ±  1797.623  ns/op
JDKGetPut.bench               DEFAULT      -1  200000         CONTAINS  sample   19684   1269853.535 ±  4685.590  ns/op
JDKGetPut.bench               DEFAULT      -1  200000    ADD_OR_REMOVE  sample    9744   2566531.573 ± 14316.991  ns/op
JDKGetPut.bench               DEFAULT      -1  200000  ADD_THEN_REMOVE  sample    5422   4614118.315 ± 34850.089  ns/op
JDKGetPut.bench               DEFAULT      -1  200000  REMOVE_THEN_ADD  sample    5256   4760493.394 ± 25382.847  ns/op

Here, I'm testing JDKGDXDSIntSetAlt, which makes some important changes to remove(), with JDKGDXDSIntSet. What this means
is JDKGDXDSIntSetAlt can shrink the key table to half its current capacity if enough items have been removed. This sounds
like it could be useful, and it does speed up remove(), but it slows down the benchmarks ADD_THEN_REMOVE and
REMOVE_THEN_ADD. By about a factor of two. I'm not quite sure why this happens.

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=8000,40000,200000 -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode     Cnt         Score       Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1    8000              ADD  sample  408323     15550.033 ±    49.549  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1    8000           REMOVE  sample  598962     16793.350 ±    37.710  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1    8000         CONTAINS  sample  389772     16424.417 ±   117.504  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1    8000    ADD_OR_REMOVE  sample  417528     30146.611 ±    71.547  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1    8000  ADD_THEN_REMOVE  sample  482922     51767.830 ±   108.931  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1    8000  REMOVE_THEN_ADD  sample  439065     56928.174 ±    78.252  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1   40000              ADD  sample  243899    102540.435 ±   156.164  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1   40000           REMOVE  sample  269440     92802.839 ±   122.642  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1   40000         CONTAINS  sample  241187    103620.980 ±   147.352  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1   40000    ADD_OR_REMOVE  sample   69246    361431.681 ±   663.888  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1   40000  ADD_THEN_REMOVE  sample   80199    312150.163 ±   492.690  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1   40000  REMOVE_THEN_ADD  sample   82663    302548.600 ±   521.919  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample   40763    613673.029 ±  1644.688  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample   49510    505148.983 ±  1203.094  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000         CONTAINS  sample   42762    585304.159 ±  1225.849  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000    ADD_OR_REMOVE  sample   17500   1428673.331 ±  4524.053  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample   12252   2041374.255 ±  6342.287  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  REMOVE_THEN_ADD  sample   12399   2016777.869 ±  6508.144  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1    8000              ADD  sample  408352     15711.092 ±    93.037  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1    8000           REMOVE  sample  427330     14962.450 ±    69.781  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1    8000         CONTAINS  sample  398350     16055.857 ±    66.902  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1    8000    ADD_OR_REMOVE  sample  662126     18998.774 ±    52.006  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1    8000  ADD_THEN_REMOVE  sample  157533    158649.187 ±   297.381  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1    8000  REMOVE_THEN_ADD  sample  158565    157464.183 ±   304.123  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1   40000              ADD  sample  256998     97364.237 ±   171.336  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1   40000           REMOVE  sample  358215     69766.542 ±   116.930  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1   40000         CONTAINS  sample  249996    100003.520 ±   186.806  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1   40000    ADD_OR_REMOVE  sample   70623    354140.409 ±   756.178  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1   40000  ADD_THEN_REMOVE  sample   26112    958608.471 ±  2424.256  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1   40000  REMOVE_THEN_ADD  sample   26124    957509.654 ±  2462.936  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample   41693    600102.695 ±  1820.052  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample   79290    315497.880 ±   818.085  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000         CONTAINS  sample   43648    572920.176 ±  1439.860  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000    ADD_OR_REMOVE  sample   17078   1464498.561 ±  4241.372  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample    5208   4806481.401 ± 18819.892  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  REMOVE_THEN_ADD  sample    5341   4687325.585 ± 21235.961  ns/op

This tests the seemingly-simple change from an unsigned right shift by `shift` to a bitwise AND with `mask`. It's
definitely a little faster here all-around, but could be a very bad idea to use for items whose hashCode()-s have
entropy only in upper bits, such as if using Float.hashCode() on non-fractional floats.

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE,REMOVE_THEN_ADD -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt        Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40786   613409.103 ± 1627.909  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49281   507628.172 ± 1291.853  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12120  2063481.325 ± 6666.897  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  REMOVE_THEN_ADD  sample  12626  1980967.010 ± 6127.184  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  42785   584688.922 ± 1426.785  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  57689   433590.345 ±  882.530  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12874  1944535.912 ± 5181.595  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  REMOVE_THEN_ADD  sample  12769  1960561.194 ± 6525.857  ns/op

This tests a hash without multiplication, which just xorshifts the int item by 16 right, adds hashMultiplier, and masks.

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE,REMOVE_THEN_ADD -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt         Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40443    618290.139 ± 2022.866  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49600    504256.723 ±  963.890  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12343   2027490.631 ± 5619.143  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  REMOVE_THEN_ADD  sample  12629   1980644.493 ± 4722.375  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  41979    596169.097 ± 1567.466  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  56486    442831.425 ± 1001.374  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12366   2021758.572 ± 5695.048  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  REMOVE_THEN_ADD  sample  12794   1955823.832 ± 5848.646  ns/op

Mixing here is just too complex, and it slows down remove() relative to before.

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE,REMOVE_THEN_ADD -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt         Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40655    615564.647 ± 1403.066  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  48802    512724.671 ± 1236.017  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12137   2060834.381 ± 6655.280  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  REMOVE_THEN_ADD  sample  12520   1999181.373 ± 7091.470  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  41961    595573.113 ± 1456.327  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  48553    515190.813 ± 1029.971  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12288   2036846.500 ± 6799.794  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  REMOVE_THEN_ADD  sample  13161   1901004.298 ± 5892.261  ns/op

Using just a variable-distance rotation and a mask:

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt         Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40669    615033.815 ± 1686.685  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49499    505236.902 ± 1035.432  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12313   2030924.906 ± 7746.610  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  42079    594626.110 ± 2115.931  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  54225    461250.900 ±  924.388  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12358   2023321.086 ± 7244.650  ns/op

Another round of... almost nothing...

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt        Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40997   610652.673 ± 1439.175  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49531   505233.767 ± 1038.653  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12188  2052307.219 ± 4947.554  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  41888   597878.429 ± 1608.951  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  55245   452803.143 ±  870.597  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12143  2060755.179 ± 6860.891  ns/op

Using a XOR-Rotate-XOR-Rotate step and a mask seems like an all-around improvement, but it isn't a hash family...

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt         Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40824    612636.607 ± 1539.345  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49513    504979.448 ± 1154.502  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12223   2046029.912 ± 7300.038  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  44072    567779.561 ± 1297.854  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  57978    431377.423 ±  895.267  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  13228   1890993.272 ± 6874.631  ns/op

This one is a hash family; it just uses a xorshift by 16 right, then multiply by `hashMultiplier` before masking.

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt        Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40720   614833.779 ± 1580.591  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49674   503807.021 ±  994.050  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  11986  2088241.679 ± 7754.306  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  42918   582460.973 ± 1443.304  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  56118   446145.959 ± 1032.009  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  11564  2162419.160 ± 7015.515  ns/op

This brings the Alt test back to what the non-Alt test uses for place(), with other optimizations remaining.
There's some significant slowdown after a lot of entries have been added or removed, and I'm not sure why. It could be
some kind of deoptimization due to branch prediction failure.

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt         Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40879    612057.706 ± 1492.504  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49386    506836.654 ± 1044.613  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12318   2031158.783 ± 6095.634  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  40952    611001.299 ± 1575.823  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  51568    485035.229 ± 1030.386  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12605   1985069.290 ± 7150.496  ns/op

This one has much better remove() performance, and it just uses a xorshift right by 16 and mask. It isn't a family.

~\.jdks\temurin-23\bin\java.exe -Xms8G -Xmx8G -XX:+UseZGC -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -jar benchmarks.jar "(JDKGDXDSIntSet|JDKGDXDSIntSetAlt)\.bench" -p impl=DEFAULT -p size=200000 -p workload=ADD,REMOVE,ADD_THEN_REMOVE -wi 5 -i 5 -f 1 -w 5 -r 5

Benchmark                         (impl)  (seed)  (size)       (workload)    Mode    Cnt         Score      Error  Units
JDKGDXDSIntSet.bench             DEFAULT      -1  200000              ADD  sample  40899    611889.236 ± 1846.758  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000           REMOVE  sample  49253    507979.075 ± 1056.374  ns/op
JDKGDXDSIntSet.bench             DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  12236   2044633.085 ± 6117.585  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000              ADD  sample  43758    571406.427 ± 1478.316  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000           REMOVE  sample  61824    404942.824 ±  734.179  ns/op
JDKGDXDSIntSetAlt.bench          DEFAULT      -1  200000  ADD_THEN_REMOVE  sample  13041   1919505.864 ± 5092.610  ns/op
